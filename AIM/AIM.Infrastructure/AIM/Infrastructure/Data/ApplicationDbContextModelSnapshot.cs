// <auto-generated />
using System;
using AIM.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AIM.Infrastructure.AIM.Infrastructure.Data
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AIM.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("token");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("AIM.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("Priveleges")
                        .HasColumnType("integer")
                        .HasColumnName("priveleges");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("AIM.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("AIM.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIM.Domain.Entities.User", b =>
                {
                    b.OwnsOne("AIM.Domain.ValueObjects.FIO", "FIO", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Fathername")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("fathername");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("name");

                            b1.Property<string>("Sername")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("sername");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("AIM.Domain.ValueObjects.LoginInfo", "LoginInfo", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("email");

                            b1.Property<string>("PhoneNumber")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("phonenumber");

                            b1.Property<string>("Username")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("username");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("AIM.Domain.ValueObjects.Messengers", "Messengers", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Max")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("max");

                            b1.Property<string>("Other")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("othermessenger");

                            b1.Property<string>("Telegram")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("telegram");

                            b1.Property<string>("VK")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("vk");

                            b1.Property<string>("WhatsApp")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("whatsapp");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("FIO")
                        .IsRequired();

                    b.Navigation("LoginInfo")
                        .IsRequired();

                    b.Navigation("Messengers")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
